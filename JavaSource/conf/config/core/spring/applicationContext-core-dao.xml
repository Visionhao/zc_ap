<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>


  	<bean id="dataSource"
  		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
  		<property name="driverClassName">
  			<value>${jdbc.driverClassName}</value>
  		</property>
  		<property name="url">
  			<value>${jdbc.url}</value>
  		</property>
  		<property name="username">
  			<value>${jdbc.username}</value>
  		</property>
  		<property name="password">
  			<value>${jdbc.password}</value>
  		</property>
  	</bean>

		<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	   <property name="dataSource" ref="dataSource"/>
	    <property name="mappingJarLocations">
		    <list>
		        <value>WEB-INF/lib/uap1.0-admin.jar</value>
		    </list>
	  </property> 
	  <property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/com/mp100/risk/ap/auditing/domain/hibernate/</value>
				<value>classpath:/com/mp100/risk/ap/team/domain/hibernate/</value>
				<value>classpath:/com/mp100/risk/ap/seats/domain/hibernate/</value>
			</list>
	  </property>
		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.query.substitutions">true=1,false=0,yes='Y', no='N'</prop>
				<!--prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop-->
                <!-- prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop-->
                <!--prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop-->
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
		<property name="lobHandler" ref="oracleLobHandler"/>
	</bean>
	
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" lazy-init="true"/>  
	
	<bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"	lazy-init="true">
		<property name="nativeJdbcExtractor">
			<ref local="nativeJdbcExtractor" />
		</property>
	</bean>

		
	<!--
      | 事务管理
      -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
        <property name="nestedTransactionAllowed" value="true"/>
	</bean>
	
	
	<bean id="baseTransactionProxy" abstract="true"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager">
            <ref bean="transactionManager"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <prop key="find*">PROPAGATION_REQUIRED,-DAORuntimeException</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-DAORuntimeException</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-DAORuntimeException</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_REQUIRED</prop>
                <prop key="execute*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
    
   
	
	<!--
	  | 基础的BaseDao 
	 -->
	
	 <bean id="com.uap.core.domain.dao.IBaseDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="proxyInterfaces">
            <value>com.uap.core.domain.dao.IBaseDao</value>
        </property>
        <property name="target" ref="com.uap.core.domain.dao.impl.BaseDaoImpl"/>
          <!--
	     | 权限拦截
	    -->
        <property name="interceptorNames">
           <list>
                <value>rbacAdvisor</value>
           </list>
        </property>
    </bean>
    
    <!--
	  | 基础的查询BaseDao ，配置AOP进行权限拦截
	 -->
	 <bean id="com.uap.core.domain.dao.IBaseQueryDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="proxyInterfaces">
            <value>com.uap.core.domain.dao.IBaseQueryDao</value>
        </property>
        <property name="target" ref="com.uap.core.domain.dao.impl.BaseDaoImpl"/>
        

    </bean>

    <bean id="com.uap.core.domain.dao.impl.BaseDaoImpl" class="com.uap.core.domain.dao.impl.BaseDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

	<bean id="com.uap.common.utils.AppContextUtils" class="com.uap.common.utils.AppContextUtils"/>
	
</beans>
